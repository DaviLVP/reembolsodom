// index.js

// Importa√ß√µes (Usando CommonJS, como no seu c√≥digo original)
require('dotenv').config();
const express = require('express');
const { MongoClient, ObjectId, ServerApiVersion } = require('mongodb');
const bodyParser = require('body-parser');
const cors = require('cors');
const bcrypt = require = require('bcrypt'); // Note: 'bcrypt' √© s√≠ncrono, 'bcryptjs' √© ass√≠ncrono e comum no Node

// Configura√ß√£o do Express
const app = express();
app.use(cors());
app.use(bodyParser.json());

// Vari√°veis de conex√£o e DB
const uri = process.env.MONGO_URI;
const port = process.env.PORT || 3000;

let client;
let db;

/**
 * Fun√ß√£o para conectar ao MongoDB e iniciar o servidor Express.
 */
async function startServer() {
  if (!uri) {
      console.error('‚ùå ERRO CR√çTICO: Vari√°vel de ambiente MONGO_URI n√£o definida. O servidor n√£o pode iniciar.');
      process.exit(1);
  }

  try {
    // 1. Conex√£o com o MongoDB
    // ‚úÖ CORRE√á√ÉO APLICADA PARA SSL/TLS: Adiciona as op√ß√µes de SSL/TLS para funcionar no Railway/Linux
    client = new MongoClient(uri, { 
      serverApi: {
        version: ServerApiVersion.v1,
        strict: true,
        deprecationErrors: true,
      },
      ssl: true,
      tlsAllowInvalidCertificates: true // Permite certificados inv√°lidos (solu√ß√£o para ambiente Railway)
    });
    
    await client.connect();

    // Define o DB para o nome que voc√™ usou ("bancoreembolso")
    // Se o nome do banco estiver na URI, voc√™ pode usar client.db()
    db = client.db("bancoreembolso");
    console.log("‚úÖ Conectado ao MongoDB!");

    // 2. Inicia o servidor Express APENAS ap√≥s a conex√£o com o DB
    app.listen(port, () => {
      console.log(`üöÄ Servidor rodando na porta ${port}`);
    });
  } catch (err) {
    console.error("‚ùå Erro ao conectar ao MongoDB:", err);
    process.exit(1); // encerra o processo se o banco falhar
  }
}

// ===================================
// ROTAS DE APLICA√á√ÉO
// ===================================

// Middleware para verificar se o DB est√° conectado antes de processar rotas
app.use((req, res, next) => {
    if (!db) {
        return res.status(503).json({ error: "Servi√ßo indispon√≠vel: Conex√£o com o banco de dados falhou ou ainda n√£o foi estabelecida." });
    }
    next();
});

// Rota de sa√∫de (Health Check)
app.get('/', (req, res) => {
    res.status(200).send({
        status: 'OK',
        message: 'Servidor Express rodando e acess√≠vel.',
        database_status: db ? 'Conectado (Conex√£o MongoDB OK)' : 'Desconectado',
        port_used: port
    });
});


// --------- Rotas de usu√°rios ---------

// POST /users: Cria um novo usu√°rio
app.post('/users', async (req, res) => {
  try {
    const { email, name, role, password } = req.body;
    
    // Verifica√ß√£o b√°sica para campos obrigat√≥rios
    if (!email || !password) {
        return res.status(400).json({ error: "Email e senha s√£o obrigat√≥rios." });
    }

    const password_hash = await bcrypt.hash(password, 10);
    const result = await db.collection('users').insertOne({ email, name, role, password_hash });
    res.status(201).json({ insertedId: result.insertedId, message: "Usu√°rio criado com sucesso" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// GET /users/:id: Busca um usu√°rio por ID
app.get('/users/:id', async (req, res) => {
  try {
    if (!ObjectId.isValid(req.params.id)) {
        return res.status(400).json({ error: "ID de usu√°rio inv√°lido." });
    }
    const user = await db.collection('users').findOne({ _id: new ObjectId(req.params.id) });
    if (!user) {
        return res.status(404).json({ error: "Usu√°rio n√£o encontrado." });
    }
    res.json(user);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// --------- Rotas de despesas ---------

// POST /expenses: Cria uma nova despesa
app.post('/expenses', async (req, res) => {
  try {
    const expense = req.body;
    
    // Adicionar timestamp
    expense.createdAt = new Date();
    
    const result = await db.collection('expenses').insertOne(expense);
    res.status(201).json({ insertedId: result.insertedId, message: "Despesa registrada com sucesso" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// GET /expenses: Lista todas as despesas
app.get('/expenses', async (req, res) => {
  try {
    // Ordena por data de cria√ß√£o (se voc√™ adicionou um timestamp)
    const expenses = await db.collection('expenses').find().sort({ createdAt: -1 }).toArray();
    res.json(expenses);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// GET /expenses/:id: Busca uma despesa por ID
app.get('/expenses/:id', async (req, res) => {
  try {
    if (!ObjectId.isValid(req.params.id)) {
        return res.status(400).json({ error: "ID de despesa inv√°lido." });
    }
    const expense = await db.collection('expenses').findOne({ _id: new ObjectId(req.params.id) });
    if (!expense) {
        return res.status(404).json({ error: "Despesa n√£o encontrada." });
    }
    res.json(expense);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// PUT /expenses/:id: Atualiza uma despesa
app.put('/expenses/:id', async (req, res) => {
  try {
    if (!ObjectId.isValid(req.params.id)) {
        return res.status(400).json({ error: "ID de despesa inv√°lido." });
    }
    const updated = req.body;
    // Remove o campo _id caso ele venha no body para evitar erros
    delete updated._id; 
    
    const result = await db.collection('expenses').updateOne(
      { _id: new ObjectId(req.params.id) },
      { $set: updated }
    );
    
    if (result.matchedCount === 0) {
        return res.status(404).json({ message: "Despesa n√£o encontrada para atualiza√ß√£o." });
    }
    
    res.json({ message: "Despesa atualizada com sucesso" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// DELETE /expenses/:id: Deleta uma despesa
app.delete('/expenses/:id', async (req, res) => {
  try {
    if (!ObjectId.isValid(req.params.id)) {
        return res.status(400).json({ error: "ID de despesa inv√°lido." });
    }
    const result = await db.collection('expenses').deleteOne({ _id: new ObjectId(req.params.id) });
    
    if (result.deletedCount === 0) {
        return res.status(404).json({ message: "Despesa n√£o encontrada para exclus√£o." });
    }
    
    res.json({ message: "Despesa exclu√≠da com sucesso" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Executa a fun√ß√£o principal
startServer();